- name: "Update all packages"
  yum:
    name: "*"
    state: latest

- name: "Install Required packages"
  yum:
    name: ['socat','conntrack','ipset']
    state: latest

- name: "Create the installation directories"
  file:
    path: "{{ item }}"
    owner: root
    group: root
    state: directory
  with_items:
    - /etc/cni/net.d
    - /opt/cni/bin
    - /var/lib/kubelet
    - /var/lib/kube-proxy
    - /var/lib/kubernetes
    - /var/run/kubernetes
    - /etc/containerd

- name: "Download worker binaries"
  get_url:
    url: "{{ item }}"
    dest: /usr/local/bin
    mode: u+x,g+x,o+x
  with_items:
    - "{{ kubectl_url }}"
    - "{{ kube_proxy_url }}"
    - "{{ kubelet_url }}"

- name: "Download runsc package"
  get_url:
    url: "{{ runsc_url }}"
    dest: /usr/local/bin/runsc
    mode: +x

- name: "Download runc binary"
  get_url:
    url: "{{ runc_url }}"
    dest: /usr/local/bin/runc
    mode: +x

- name: "Download and unarchive crictl binaries"
  unarchive:
    remote_src: yes
    src: "{{ crictl_url }}"
    dest: /usr/local/bin

- name: "Download and unarchive cni-plugins binaries"
  unarchive:
    remote_src: yes
    src: "{{ cni_plugins_url }}"
    dest: /opt/cni/bin

- name: "Download and unarchive crictl binaries"
  unarchive:
    remote_src: yes
    src: "{{ containerd_url }}"
    dest: /tmp/

- name: "Move containerd binaries to /bin/ directory"
  shell: "mv /tmp/bin/* /bin"
  ignore_errors: yes

- name: "Configure CNI bridge configuration file"
  template:
    src: 10-bridge.conf
    dest: /etc/cni/net.d/10-bridge.conf
    owner: root
    group: root

- name: "Configure CNI loopback configuration file"
  template:
    src: 99-loopback.conf
    dest: /etc/cni/net.d/99-loopback.conf
    owner: root
    group: root

- name: "Configure containerd"
  template:
    src: config.toml
    dest: /etc/containerd/config.toml
    owner: root
    group: root

- name: "Configure containerd.service"
  template:
    src: containerd.service
    dest: /etc/systemd/system/containerd.service
    owner: root
    group: root

- name: "Copy kubelet certificates"
  shell: "cp -rp /home/vagrant/{{ item }} /var/lib/kubelet"
  ignore_errors: yes
  with_items:
    - "{{ hostname }}-key.pem"
    - "{{ hostname }}.pem"

- name: "Copy kubelet kubeconfig"
  shell: "cp -rp /home/vagrant/{{ hostname }}.kubeconfig /var/lib/kubelet/kubeconfig"
  ignore_errors: yes

- name: "Copy ca.pem to /var/lib/kubernetes"
  shell: "cp -rp /home/vagrant/ca.pem /var/lib/kubernetes/"
  ignore_errors: yes

- name: "Configure kubelet-config.yaml"
  template:
    src: kubelet-config.yaml
    dest: /var/lib/kubelet/kubelet-config.yaml
    owner: root
    group: root

- name: "Configure kubelet.service"
  template:
    src: kubelet.service
    dest: /etc/systemd/system/kubelet.service
    owner: root
    group: root

- name: "Copy kube-proxy.kubeconfig"
  shell: "cp -rp /home/vagrant/kube-proxy.kubeconfig /var/lib/kube-proxy/kubeconfig"
  ignore_errors: yes

- name: "Create kube-proxy-config.yaml"
  template: 
    src: kube-proxy-config.yaml
    dest: /var/lib/kube-proxy/kube-proxy-config.yaml
    owner: root
    group: root

- name: "Create kube-proxy.service"
  template:
    src: kube-proxy.service
    dest: /etc/systemd/system/kube-proxy.service
    owner: root
    group: root

- name: "Enable containerd, kubelet and kube-proxy services"
  service:
    name: "{{ item }}"
    enabled: yes
  with_items:
    - containerd
    - kubelet
    - kube-proxy

- name: "Disable SWAP since kubernetes can't work with swap enabled (1/2)"
  shell: |
    swapoff -a

- name: "Disable SWAP in fstab since kubernetes can't work with swap enabled (2/2)"
  replace:
    path: /etc/fstab
    regexp: '^(.+?\sswap\s+sw\s+.*)$'
    replace: '# \1'

- name: "start containerd, kubelet and kube-proxy services"
  service:
    name: "{{ item }}"
    state: restarted
  with_items:
    - containerd
    - kubelet
    - kube-proxy

